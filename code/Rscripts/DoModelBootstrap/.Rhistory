require(OpenMX)
source('http://openmx.psyc.virginia.edu/getOpenMx.R')
source('https://openmx.ssri.psu.edu/software/getOpenMx.R')
source('http://openmx.psyc.virginia.edu/getOpenMx.R')
source('https://openmx.ssri.psu.edu/software/getOpenMx.R')
source('https://openmx.ssri.psu.edu/software/getOpenMx.R')
utils:::menuInstallLocal()
require('OpenMx')
q()
dir
ls
edit(ls)
dir
dir(.)
dir('.')
edit(hist)
help hist
?hist
demo(Hershey)
demo()
?data
data(twindata)
library(psych)
install.packages(psych)
q
q()
install.packages('psych')
?t
version
require(polycor)
install.packages('polycor')
q()
randperm(10)
######################################
# 双生子的SAT ACE ADE及其nest model
# 1 读取数据
# 2 建立SAT模型及其子模型，并做模型比较
# 3 建立ACE模型及其子模型，并做模型比较
# 4 建立ADE模型及其子模型，并做模型比较
# 5 或者，我先把所有模型RUN出来，在做模型比较咯！~
# ----------------------------------------------------------------------------------------------------------------------
# Program: oneSATc.R
#
# Twin Univariate Saturated model to estimate means and (co)variances across multiple groups
# Matrix style model - Raw data - Continuous data
# -------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|
# Load Libraries & Options
setwd("D:/Documents/ScriptR")
rm(list=ls())
library(OpenMx)
library(psych); library(polycor)
source("miFunctions.R")
# require(xlsx)
# TryFitting <- function(model, intervals=TRUE){
#
#   fitres <- mxRun(model, intervals = intervals) # 需要catch error之类的函数处理error
#   if(fitres$output$status$code==0){
#     return(fitres)
#   }else{
#     while (TRUE) {
#       fitres    <- mxTryHard(model, intervals=intervals )
#       if (fitres$output$status$code==0) {
#         break()
#       }
#     }
#     return(fitres)
#   }
# }
# DoOneC <- function(varname){
# Create Output
# filename <- "oneSATc"
# sink(paste(filename,".Ro",sep=""), append=FALSE, split=TRUE)
# ----------------------------------------------------------------------------------------------------------------------
# PREPARE DATA
# Load Data
# twinDataraw <-read.xlsx("RDMin1.xlsx", sheetIndex = 1, na.strings = "NA")
twinDataraw <-read.table("RDMin1.csv", header = TRUE, sep = ",", na.strings = "NA")
# twinDataraw <-read.table("StrangerMental.csv", header = TRUE, sep = ",", na.strings = "NA")
# twinDataraw <-read.table("TwinMental.csv", header = TRUE, sep = ",", na.strings = "NA")
# twinDataraw <-read.table("hcpbehdata.csv", header = TRUE, sep = ",", na.strings = "NA")
# head(twinDataraw)
#--- remove bad data ----#
# twinDatass = subset(twinDataraw, twinDataraw$nmissing1<30&twinDataraw$nmissing2<30)
# twinDatass = subset(twinDatass, abs(twinDatass$mcoh1 - twinDatass$mcoh2) < 10)
# twinData = subset(twinDataraw, !(twinDataraw$twinsNum %in% c('T001','T007','T013','T028','T035','T053','T054','T055','T087','T090')))
# twinData = subset(twinDataraw, !(twinDataraw$twinsNum %in% c('T057', 'T020', 'T032', 'T086', 'T114', 'T053', 'T088', 'T112', 'T017', 'T066')))
# twinData = subset(twinData, twinData$rtweight1<0&twinData$rtweight2<0)
# twinData = subset(twinData, twinData$rtcorr1<0&twinData$rtcorr2<0)
# twinData = subset(twinDataraw, !(twinDataraw$PMAT24_A_CR2 %in% c('NaN')))
twinData = twinDataraw
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
acecoef <- round(rbind(fitACE$US$result,fitACEAE$US$result,fitCE$US$result,fitACEE$US$result),4)
acecoef
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/ModelOutput2Xlsx.R', echo=TRUE)
source('~/ScriptR/oneALLpath.R', echo=TRUE)
source('~/ScriptR/CalcCI.R', echo=TRUE)
atmp = fitACE$output$confidenceIntervals
atmp
atmp = fitCE$output$confidenceIntervals
atmp
atmp = fitACE$output$confidenceIntervals
btmp = matrix(nrow = 3, ncol = 2)
btmp[1,1] = atmp[1,1]/(atmp[1,1]+atmp[2,3]+atmp[3,3])
btmp[1,2] = atmp[1,3]/(atmp[1,3]+atmp[2,1]+atmp[3,1])
btmp[2,1] = atmp[2,1]/(atmp[1,3]+atmp[2,1]+atmp[3,3])
btmp[2,2] = atmp[2,3]/(atmp[1,1]+atmp[2,3]+atmp[3,1])
btmp[3,1] = atmp[3,1]/(atmp[1,3]+atmp[2,3]+atmp[3,1])
btmp[3,2] = atmp[3,3]/(atmp[1,1]+atmp[2,1]+atmp[3,3])
btmp
atmp = fitACE$output$confidenceIntervals
atmp
# Create Confidence Interval Objects
ciACE <- mxCI( "US[1,1:3]", interval = 0.55)
# Build Model with Confidence Intervals
modelACE <- mxModel( "oneACEc", pars, modelMZ, modelDZ, multi, estUS, ciACE )
# ----------------------------------------------------------------------------------------------------------------------
# RUN MODEL
# Run ACE Model
fitACE <- mxTryHard( modelACE, intervals=T )
sumACE <- summary( fitACE )
atmp = fitACE$output$confidenceIntervals
aatmp
atmp
ciACE <- mxCI( "US[1,1:3]", interval = 0.35)
# Build Model with Confidence Intervals
modelACE <- mxModel( "oneACEc", pars, modelMZ, modelDZ, multi, estUS, ciACE )
# ----------------------------------------------------------------------------------------------------------------------
# RUN MODEL
# Run ACE Model
fitACE <- mxTryHard( modelACE, intervals=T )
sumACE <- summary( fitACE )
atmp = fitACE$output$confidenceIntervals
atmp
ciACE <- mxCI( "US[1,1:3]", interval = 0.8)
# Build Model with Confidence Intervals
modelACE <- mxModel( "oneACEc", pars, modelMZ, modelDZ, multi, estUS, ciACE )
# ----------------------------------------------------------------------------------------------------------------------
# RUN MODEL
# Run ACE Model
fitACE <- mxTryHard( modelACE, intervals=T )
sumACE <- summary( fitACE )
fitACE$output$confidenceIntervals
# Create Confidence Interval Objects
ciACE <- mxCI( "US[1,1:3]", interval = 0.7)
# Build Model with Confidence Intervals
modelACE <- mxModel( "oneACEc", pars, modelMZ, modelDZ, multi, estUS, ciACE )
# ----------------------------------------------------------------------------------------------------------------------
# RUN MODEL
# Run ACE Model
fitACE <- mxTryHard( modelACE, intervals=T )
sumACE <- summary( fitACE )
fitACE$output$confidenceIntervals
allvar = c('mcoh','mconf','mrtime','rtweight','myiscgamma','selfguessauc')
length(allvar)
allvar[1]
for thisvar in allvar
for (thisvar in allvar){ii = ii+1}
ii = 1
for (thisvar in allvar){ii = ii+1}
ii
for (thisvar in allvar){print(thisvar)}
setwd("D:/Documents/ScriptR/DoModelBootstrap")
# library(R.matlab)
allvar = c('mcoh','mconf','mrtime','rtweight','myiscgamma','selfguessauc')
for (thisvar in allvar){
resfolder = paste0('res_modelcomp/[backup33]/', thisvar)
allresfiles = dir(resfolder)
ace.model = c('ACE', 'AE', 'CE', 'E')
ade.model = c('ADE', 'AE', 'DE', 'E')
allfit = data.frame(Mcode=NaN,A=NaN,A_D=NaN,E=NaN,SA=NaN,SD_SC=NaN,SE=NaN)
M = c()
for (jj in 1:length(allresfiles)) {
pathtofile = paste(resfolder, allresfiles[jj], sep = '/')
load(pathtofile)
for (ii in 1:length(res)) {
ace.fit = res[[ii]][[2]][[1]]
ace.coeff = res[[ii]][[2]][[2]]
bestcoef = ace.coeff[1,]
M[(jj-1)*200+ii] = ace.model[1]
allfit[(jj-1)*200+ii, ] = c(1, bestcoef)
}
}
allfit$M = M
write.csv(allfit, paste0('R2MATLAB/', 'allACE_', thisvar, '.csv'))
}
